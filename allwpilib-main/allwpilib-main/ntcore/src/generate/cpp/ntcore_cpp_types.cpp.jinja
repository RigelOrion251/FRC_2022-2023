// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

#include "ntcore_cpp_types.h"

#include "Handle.h"
#include "InstanceImpl.h"

namespace nt {
{% for t in types %}
bool Set{{ t.TypeName }}(NT_Handle pubentry, {{ t.cpp.ParamType }} value, int64_t time) {
  if (auto ii = InstanceImpl::Get(Handle{pubentry}.GetInst())) {
    return ii->localStorage.SetEntryValue(pubentry,
        Value::Make{{ t.TypeName }}(value, time == 0 ? Now() : time));
  } else {
    return {};
  }
}

bool SetDefault{{ t.TypeName }}(NT_Handle pubentry, {{ t.cpp.ParamType }} defaultValue) {
  if (auto ii = InstanceImpl::Get(Handle{pubentry}.GetInst())) {
    return ii->localStorage.SetDefaultEntryValue(pubentry,
        Value::Make{{ t.TypeName }}(defaultValue, 1));
  } else {
    return {};
  }
}

{{ t.cpp.ValueType }} Get{{ t.TypeName }}(NT_Handle subentry, {{ t.cpp.ParamType }} defaultValue) {
  return GetAtomic{{ t.TypeName }}(subentry, defaultValue).value;
}

Timestamped{{ t.TypeName }} GetAtomic{{ t.TypeName }}(NT_Handle subentry, {{ t.cpp.ParamType }} defaultValue) {
  if (auto ii = InstanceImpl::Get(Handle{subentry}.GetInst())) {
    return ii->localStorage.GetAtomic{{ t.TypeName }}(subentry, defaultValue);
  } else {
    return {};
  }
}

std::vector<Timestamped{{ t.TypeName }}> ReadQueue{{ t.TypeName }}(NT_Handle subentry) {
  if (auto ii = InstanceImpl::Get(Handle{subentry}.GetInst())) {
    return ii->localStorage.ReadQueue{{ t.TypeName }}(subentry);
  } else {
    return {};
  }
}

std::vector<{% if t.cpp.ValueType == "bool" %}int{% else %}{{ t.cpp.ValueType }}{% endif %}> ReadQueueValues{{ t.TypeName }}(NT_Handle subentry) {
  std::vector<{% if t.cpp.ValueType == "bool" %}int{% else %}{{ t.cpp.ValueType }}{% endif %}> rv;
  auto arr = ReadQueue{{ t.TypeName }}(subentry);
  rv.reserve(arr.size());
  for (auto&& elem : arr) {
    rv.emplace_back(std::move(elem.value));
  }
  return rv;
}
{% if t.cpp.SmallRetType and t.cpp.SmallElemType %}
{{ t.cpp.SmallRetType }} Get{{ t.TypeName }}(NT_Handle subentry, wpi::SmallVectorImpl<{{ t.cpp.SmallElemType }}>& buf, {{ t.cpp.ParamType }} defaultValue) {
  return GetAtomic{{ t.TypeName }}(subentry, buf, defaultValue).value;
}

Timestamped{{ t.TypeName }}View GetAtomic{{ t.TypeName }}(
    NT_Handle subentry,
    wpi::SmallVectorImpl<{{ t.cpp.SmallElemType }}>& buf,
    {{ t.cpp.ParamType }} defaultValue) {
  if (auto ii = InstanceImpl::Get(Handle{subentry}.GetInst())) {
    return ii->localStorage.GetAtomic{{ t.TypeName }}(subentry, buf, defaultValue);
  } else {
    return {};
  }
}
{% endif %}
{% endfor %}
}  // namespace nt
