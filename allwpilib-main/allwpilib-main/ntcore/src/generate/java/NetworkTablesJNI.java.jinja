// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package edu.wpi.first.networktables;

import edu.wpi.first.util.RuntimeLoader;
import edu.wpi.first.util.datalog.DataLog;
import java.io.IOException;
import java.util.EnumSet;
import java.util.concurrent.atomic.AtomicBoolean;

public final class NetworkTablesJNI {
  static boolean libraryLoaded = false;
  static RuntimeLoader<NetworkTablesJNI> loader = null;

  public static class Helper {
    private static AtomicBoolean extractOnStaticLoad = new AtomicBoolean(true);

    public static boolean getExtractOnStaticLoad() {
      return extractOnStaticLoad.get();
    }

    public static void setExtractOnStaticLoad(boolean load) {
      extractOnStaticLoad.set(load);
    }
  }

  static {
    if (Helper.getExtractOnStaticLoad()) {
      try {
        loader =
            new RuntimeLoader<>(
                "ntcorejni", RuntimeLoader.getDefaultExtractionRoot(), NetworkTablesJNI.class);
        loader.loadLibrary();
      } catch (IOException ex) {
        ex.printStackTrace();
        System.exit(1);
      }
      libraryLoaded = true;
    }
  }

  /**
   * Force load the library.
   *
   * @throws IOException if the library fails to load
   */
  public static synchronized void forceLoad() throws IOException {
    if (libraryLoaded) {
      return;
    }
    loader =
        new RuntimeLoader<>(
            "ntcorejni", RuntimeLoader.getDefaultExtractionRoot(), NetworkTablesJNI.class);
    loader.loadLibrary();
    libraryLoaded = true;
  }

  private static int[] pubSubOptionTypes(PubSubOption... options) {
    int[] rv = new int[options.length];
    for (int i = 0; i < options.length; i++) {
      rv[i] = options[i].m_type;
    }
    return rv;
  }

  private static double[] pubSubOptionValues(PubSubOption... options) {
    double[] rv = new double[options.length];
    for (int i = 0; i < options.length; i++) {
      rv[i] = options[i].m_value;
    }
    return rv;
  }

  public static native int getDefaultInstance();

  public static native int createInstance();

  public static native void destroyInstance(int inst);

  public static native int getInstanceFromHandle(int handle);

  public static native int getEntry(int inst, String key);

  private static native int getEntry(
      int topic, int type, String typeStr, int[] optionTypes, double[] optionValues);

  public static int getEntry(int topic, int type, String typeStr, PubSubOption... options) {
    return getEntry(topic, type, typeStr, pubSubOptionTypes(options), pubSubOptionValues(options));
  }

  public static native String getEntryName(int entry);

  public static native long getEntryLastChange(int entry);

  public static native int getType(int entry);

  /* Topic functions */

  public static native int[] getTopics(int inst, String prefix, int types);

  public static native int[] getTopicsStr(int inst, String prefix, String[] types);

  public static native TopicInfo[] getTopicInfos(
      NetworkTableInstance instObject, int inst, String prefix, int types);

  public static native TopicInfo[] getTopicInfosStr(
      NetworkTableInstance instObject, int inst, String prefix, String[] types);

  public static native int getTopic(int inst, String name);

  public static native String getTopicName(int topic);

  public static native int getTopicType(int topic);

  public static native void setTopicPersistent(int topic, boolean value);

  public static native boolean getTopicPersistent(int topic);

  public static native void setTopicRetained(int topic, boolean value);

  public static native boolean getTopicRetained(int topic);

  public static native String getTopicTypeString(int topic);

  public static native boolean getTopicExists(int topic);

  public static native String getTopicProperty(int topic, String name);

  public static native void setTopicProperty(int topic, String name, String value);

  public static native void deleteTopicProperty(int topic, String name);

  public static native String getTopicProperties(int topic);

  public static native void setTopicProperties(int topic, String properties);

  private static native int subscribe(
      int topic, int type, String typeStr, int[] optionTypes, double[] optionValues);

  public static int subscribe(int topic, int type, String typeStr, PubSubOption... options) {
    return subscribe(topic, type, typeStr, pubSubOptionTypes(options), pubSubOptionValues(options));
  }

  public static native void unsubscribe(int sub);

  private static native int publish(
      int topic, int type, String typeStr, int[] optionTypes, double[] optionValues);

  public static int publish(int topic, int type, String typeStr, PubSubOption... options) {
    return publish(topic, type, typeStr, pubSubOptionTypes(options), pubSubOptionValues(options));
  }

  private static native int publishEx(
      int topic, int type, String typeStr, String properties, int[] optionTypes, double[] optionValues);

  public static int publishEx(int topic, int type, String typeStr, String properties, PubSubOption... options) {
    return publishEx(topic, type, typeStr, properties, pubSubOptionTypes(options), pubSubOptionValues(options));
  }

  public static native void unpublish(int pubentry);

  public static native void releaseEntry(int entry);

  public static native void release(int pubsubentry);

  public static native int getTopicFromHandle(int pubsubentry);

  private static native int subscribeMultiple(
      int inst, String[] prefixes, int[] optionTypes, double[] optionValues);

  public static int subscribeMultiple(int inst, String[] prefixes, PubSubOption... options) {
    return subscribeMultiple(
        inst, prefixes, pubSubOptionTypes(options), pubSubOptionValues(options));
  }

  public static native void unsubscribeMultiple(int sub);
{% for t in types %}
  public static native Timestamped{{ t.TypeName }} getAtomic{{ t.TypeName }}(
      int subentry, {{ t.java.ValueType }} defaultValue);

  public static native Timestamped{{ t.TypeName }}[] readQueue{{ t.TypeName }}(int subentry);

  public static native {{ t.java.ValueType }}[] readQueueValues{{ t.TypeName }}(int subentry);

  public static native boolean set{{ t.TypeName }}(int entry, long time, {{ t.java.ValueType }} value);

  public static native {{ t.java.ValueType }} get{{ t.TypeName }}(int entry, {{ t.java.ValueType }} defaultValue);

  public static native boolean setDefault{{ t.TypeName }}(int entry, long time, {{ t.java.ValueType }} defaultValue);
{% endfor %}
  public static native NetworkTableValue[] readQueueValue(int subentry);

  public static native NetworkTableValue getValue(int entry);

  public static native void setEntryFlags(int entry, int flags);

  public static native int getEntryFlags(int entry);

  public static native TopicInfo getTopicInfo(NetworkTableInstance inst, int topic);

  public static native int createListenerPoller(int inst);

  public static native void destroyListenerPoller(int poller);

  private static int kindsToMask(EnumSet<NetworkTableEvent.Kind> kinds) {
    int mask = 0;
    for (NetworkTableEvent.Kind kind : kinds) {
      mask |= kind.getValue();
    }
    return mask;
  }

  public static int addListener(int poller, String[] prefixes, EnumSet<NetworkTableEvent.Kind> kinds) {
    return addListener(poller, prefixes, kindsToMask(kinds));
  }

  public static int addListener(int poller, int handle, EnumSet<NetworkTableEvent.Kind> kinds) {
    return addListener(poller, handle, kindsToMask(kinds));
  }

  public static native int addListener(int poller, String[] prefixes, int mask);

  public static native int addListener(int poller, int handle, int mask);

  public static native NetworkTableEvent[] readListenerQueue(
      NetworkTableInstance inst, int poller);

  public static native void removeListener(int listener);

  public static native int getNetworkMode(int inst);

  public static native void startLocal(int inst);

  public static native void stopLocal(int inst);

  public static native void startServer(
      int inst, String persistFilename, String listenAddress, int port3, int port4);

  public static native void stopServer(int inst);

  public static native void startClient3(int inst, String identity);

  public static native void startClient4(int inst, String identity);

  public static native void stopClient(int inst);

  public static native void setServer(int inst, String serverName, int port);

  public static native void setServer(int inst, String[] serverNames, int[] ports);

  public static native void setServerTeam(int inst, int team, int port);

  public static native void startDSClient(int inst, int port);

  public static native void stopDSClient(int inst);

  public static native void flushLocal(int inst);

  public static native void flush(int inst);

  public static native ConnectionInfo[] getConnections(int inst);

  public static native boolean isConnected(int inst);

  public static native long now();

  private static native int startEntryDataLog(int inst, long log, String prefix, String logPrefix);

  public static int startEntryDataLog(int inst, DataLog log, String prefix, String logPrefix) {
    return startEntryDataLog(inst, log.getImpl(), prefix, logPrefix);
  }

  public static native void stopEntryDataLog(int logger);

  private static native int startConnectionDataLog(int inst, long log, String name);

  public static int startConnectionDataLog(int inst, DataLog log, String name) {
    return startConnectionDataLog(inst, log.getImpl(), name);
  }

  public static native void stopConnectionDataLog(int logger);

  public static native int addLogger(int poller, int minLevel, int maxLevel);
}
