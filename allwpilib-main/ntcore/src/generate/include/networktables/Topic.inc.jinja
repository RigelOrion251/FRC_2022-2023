// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

#pragma once

#include "networktables/{{ TypeName }}Topic.h"
#include "networktables/NetworkTableType.h"
#include "ntcore_cpp.h"

namespace nt {

inline {{ TypeName }}Subscriber::{{ TypeName }}Subscriber(
    NT_Subscriber handle, {{ cpp.ParamType }} defaultValue)
    : Subscriber{handle},
      m_defaultValue{{ '{' }}{{ cpp.DefaultValueCopy|default('defaultValue') }}} {}

inline {{ cpp.ValueType }} {{ TypeName }}Subscriber::Get() const {
  return Get(m_defaultValue);
}

inline {{ cpp.ValueType }} {{ TypeName }}Subscriber::Get(
    {{ cpp.ParamType }} defaultValue) const {
  return ::nt::Get{{ TypeName }}(m_subHandle, defaultValue);
}
{% if cpp.SmallRetType and cpp.SmallElemType %}
inline {{ cpp.SmallRetType }} {{ TypeName }}Subscriber::Get(wpi::SmallVectorImpl<{{ cpp.SmallElemType }}>& buf) const {
  return Get(buf, m_defaultValue);
}

inline {{ cpp.SmallRetType }} {{ TypeName }}Subscriber::Get(wpi::SmallVectorImpl<{{ cpp.SmallElemType }}>& buf, {{ cpp.ParamType }} defaultValue) const {
  return nt::Get{{ TypeName }}(m_subHandle, buf, defaultValue);
}
{% endif %}
inline Timestamped{{ TypeName }} {{ TypeName }}Subscriber::GetAtomic() const {
  return GetAtomic(m_defaultValue);
}

inline Timestamped{{ TypeName }} {{ TypeName }}Subscriber::GetAtomic(
    {{ cpp.ParamType }} defaultValue) const {
  return ::nt::GetAtomic{{ TypeName }}(m_subHandle, defaultValue);
}
{% if cpp.SmallRetType and cpp.SmallElemType %}
inline Timestamped{{ TypeName }}View {{ TypeName }}Subscriber::GetAtomic(wpi::SmallVectorImpl<{{ cpp.SmallElemType }}>& buf) const {
  return GetAtomic(buf, m_defaultValue);
}

inline Timestamped{{ TypeName }}View {{ TypeName }}Subscriber::GetAtomic(wpi::SmallVectorImpl<{{ cpp.SmallElemType }}>& buf, {{ cpp.ParamType }} defaultValue) const {
  return nt::GetAtomic{{ TypeName }}(m_subHandle, buf, defaultValue);
}
{% endif %}
inline std::vector<Timestamped{{ TypeName }}>
{{ TypeName }}Subscriber::ReadQueue() {
  return ::nt::ReadQueue{{ TypeName }}(m_subHandle);
}

inline {{ TypeName }}Topic {{ TypeName }}Subscriber::GetTopic() const {
  return {{ TypeName }}Topic{::nt::GetTopicFromHandle(m_subHandle)};
}

inline {{ TypeName }}Publisher::{{ TypeName }}Publisher(NT_Publisher handle)
    : Publisher{handle} {}

inline void {{ TypeName }}Publisher::Set({{ cpp.ParamType }} value,
                                         int64_t time) {
  ::nt::Set{{ TypeName }}(m_pubHandle, value, time);
}

inline void {{ TypeName }}Publisher::SetDefault({{ cpp.ParamType }} value) {
  ::nt::SetDefault{{ TypeName }}(m_pubHandle, value);
}

inline {{ TypeName }}Topic {{ TypeName }}Publisher::GetTopic() const {
  return {{ TypeName }}Topic{::nt::GetTopicFromHandle(m_pubHandle)};
}

inline {{ TypeName }}Entry::{{ TypeName }}Entry(
    NT_Entry handle, {{ cpp.ParamType }} defaultValue)
    : {{ TypeName }}Subscriber{handle, defaultValue},
      {{ TypeName }}Publisher{handle} {}

inline {{ TypeName }}Topic {{ TypeName }}Entry::GetTopic() const {
  return {{ TypeName }}Topic{::nt::GetTopicFromHandle(m_subHandle)};
}

inline void {{ TypeName }}Entry::Unpublish() {
  ::nt::Unpublish(m_pubHandle);
}

inline {{ TypeName }}Subscriber {{ TypeName }}Topic::Subscribe(
    {% if not TypeString %}std::string_view typeString, {% endif %}{{ cpp.ParamType }} defaultValue,
    std::span<const PubSubOption> options) {
  return {{ TypeName }}Subscriber{
      ::nt::Subscribe(m_handle, NT_{{ cpp.TYPE_NAME }}, {{ TypeString|default('typeString') }}, options),
      defaultValue};
}
{%- if TypeString %}
inline {{ TypeName }}Subscriber {{ TypeName }}Topic::SubscribeEx(
    std::string_view typeString, {{ cpp.ParamType }} defaultValue,
    std::span<const PubSubOption> options) {
  return {{ TypeName }}Subscriber{
      ::nt::Subscribe(m_handle, NT_{{ cpp.TYPE_NAME }}, typeString, options),
      defaultValue};
}
{% endif %}
inline {{ TypeName }}Publisher {{ TypeName }}Topic::Publish(
    {% if not TypeString %}std::string_view typeString, {% endif %}std::span<const PubSubOption> options) {
  return {{ TypeName }}Publisher{
      ::nt::Publish(m_handle, NT_{{ cpp.TYPE_NAME }}, {{ TypeString|default('typeString') }}, options)};
}

inline {{ TypeName }}Publisher {{ TypeName }}Topic::PublishEx(
    std::string_view typeString,
    const wpi::json& properties, std::span<const PubSubOption> options) {
  return {{ TypeName }}Publisher{
      ::nt::PublishEx(m_handle, NT_{{ cpp.TYPE_NAME }}, typeString, properties, options)};
}

inline {{ TypeName }}Entry {{ TypeName }}Topic::GetEntry(
    {% if not TypeString %}std::string_view typeString, {% endif %}{{ cpp.ParamType }} defaultValue,
    std::span<const PubSubOption> options) {
  return {{ TypeName }}Entry{
      ::nt::GetEntry(m_handle, NT_{{ cpp.TYPE_NAME }}, {{ TypeString|default('typeString') }}, options),
      defaultValue};
}
{%- if TypeString %}
inline {{ TypeName }}Entry {{ TypeName }}Topic::GetEntryEx(
    std::string_view typeString, {{ cpp.ParamType }} defaultValue,
    std::span<const PubSubOption> options) {
  return {{ TypeName }}Entry{
      ::nt::GetEntry(m_handle, NT_{{ cpp.TYPE_NAME }}, typeString, options),
      defaultValue};
}
{% endif %}
}  // namespace nt
